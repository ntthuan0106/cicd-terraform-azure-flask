pipeline {
    agent any
    environment {
        AZURE_CLIENT_ID=credentials('AZURE_CLIENT_ID')
        AZURE_CLIENT_SECRET=credentials('AZURE_CLIENT_SECRET')
        AZURE_TENANT_ID=credentials('AZURE_TENANT_ID')

        RESOURCE_GROUP = 'Cluster'
        ACR_NAME = 'acrthuantest'
        AKS_NAME = 'cluster'
        
        IMAGE_NAME = 'app' // Docker image name
        TAG = 'v1' // Docker image tag
        DOCKER_REGISTRY = "${ACR_NAME}.azurecr.io"

        NGROK_API_KEY=credentials('NGROK_API_KEY')
        NGROK_AUTH_TOKEN=credentials('NGROK_AUTH_TOKEN')
        NGROK_CLIENT_SECRET=credentials('NGROK_CLIENT_SECRET')
    }
    stages {
        stage('Checkout code') {
            steps {
                // Checkout the source code from your repository
                git branch: 'main', url: 'https://github.com/ntthuan0106/dacn.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh 'docker build --pull --rm -f "web-app/Dockerfile" -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${TAG} web-app'
                }
            }
        }
        stage('Push Docker Image to ACR') {
            steps {
                script {
                    // Push the image to ACR
                    sh '''
                    echo "Login to ACR"
                    az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                    az acr login --name ${ACR_NAME}
                    docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${TAG}
                    '''
                }
            }
        }
        stage('Overwrite values'){
            steps{
                script{
                    // Encode NGROK_CLIENT_SECRET in base64
                    def encodedSecret = sh(script: "echo -n \"$NGROK_CLIENT_SECRET\" | base64", returnStdout: true).trim()
                    // Update the secrets.yaml file with the base64 encoded secret
                    sh """
                    echo "Updating secret with base64 encoded NGROK_CLIENT_SECRET..."
                    yq eval '.data.NGROK_CLIENT_SECRET = \"$encodedSecret\"' -i ./k8s/secrets.yaml
                    """
                }
            }
        }
        stage('Login to AKS'){
            steps{
                script{
                    sh'''
                    echo "Login AKS"
                    az aks get-credentials --resource-group ${RESOURCE_GROUP} --name ${AKS_NAME} --overwrite-existing
                    '''
                }
            }
        }
        stage('Helm install') {
            steps {
                script {
                    def helmStatus = sh(
                        script: '''
                            echo "Helm install"
                            helm repo add ngrok https://charts.ngrok.com
                            helm install ngrok-ingress-controller ngrok/kubernetes-ingress-controller \
                                --namespace test \
                                --create-namespace \
                                --set credentials.apiKey=$NGROK_API_KEY \
                                --set credentials.authtoken=$NGROK_AUTH_TOKEN
                        ''',
                        returnStatus: true  // Capture the exit status but continue even if it fails
                    )
                    // Optionally handle failure of Helm install
                    if (helmStatus != 0) {
                        echo "Helm installation failed, but continuing to next stage"
                    }
                }
            }
        }
        stage('Deploy to AKS') {
            steps {
                script {
                    // Get AKS credentials
                    sh '''
                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/service.yaml
                    kubectl apply -f k8s/secrets.yaml
                    kubectl apply -f k8s/ingress.yaml
                    '''
                }
            }
        }
    }
    post {
        always {
            // Clean up Docker images after build to free space
            sh 'docker rmi ${DOCKER_REGISTRY}/${IMAGE_NAME}:${TAG} || true'
        }
    }
}
